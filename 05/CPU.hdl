// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/*
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //i x x a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    //a=A or M, c=comp, d=dest, j=jump 

    //decoder
        //if they are both 1, then it is a C instruction
      
         Not(in=instruction[15], out=Ainstruction);
         Not(in=Ainstruction, out=Cinstruction);
         //if the instruction is 1, then the output is 0(A instruction)
 

    //Does the instruction go to the A or D regsiter?
    //d1=A Register, d2=D register, d3=whether to store computed value in M 
    
        And(a=Ainstruction, b=Ainstruction, out=send);
        Not(in=send, out=sendtoA);

        And(a=instruction[15], b=instruction[4], out=sendtoD);

        //when instruction[12]=1, then you use M
        And(a=instruction[15], b=instruction[12], out=mem); 
        And(a=mem, b=instruction[3], out=memory);

    //MUX
        //if instruction[15] is 0, out ALUoutput, if 1, then outputs the inst
         Mux16(a=ALUoutput,b=instruction, sel=instruction[15], out=AorD);

    //A Register
         ARegister(in=AorD, load=sendtoA, out[0..14]=Minstruction, out=A);

    //Decides if it is A or M
         Mux16(a=A, b=inM, sel=memory, out=AM);

    //D Register
        DRegister(in=ALUoutput, load=sendtoD, out=D);

    //ALU
        ALU(x=D, y=AM, zx=instruction[11], ny=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM, zr=aluZero, ng=aluNeg);

    //fetches the jump instruction
        Or(a=aluZero, b=aluNeg, out=NotPositive);
        Not(in=NotPositive, out=aluPositive);
        Not(in=aluZero, out=aluNonZero);
        Not(in=aluNeg, out=pos);

    //Jump Conditions


        DMux8Way(in=Cinstruction, sel[2]=instruction[2], sel[1]=instruction[1], sel[0]=instruction[0], a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP); 

        And(a=aluZero, b=null, out=noJump);
        And(a=pos, b=JGT, out=jump1);
         And(a=aluZero, b=JEQ, out=jump2);
          And(a=aluPositive, b=JGE, out=jump3);
           And(a=aluNeg, b=JLT, out=jump4);
            And(a=aluNonZero, b=JNE, out=jump5); 
            And(a=NotPositive, b=JLE, out=jump6);
             And(a=aluPositive, b=JMP, out=jump7);

             Or(a=jump1, b=jump2, out=one); 
             Or(a=one, b=jump3, out=two); 
             Or(a=two, b=jump4, out=three);
             Or(a=three, b=jump5, out=four);
             Or(a=four, b=jump6, out=five);
             Or(a=five, b=jump7, out=jump); 


        And(a=instruction[15], b=jump, out=jumpInst);

    //if it is not a jump, then the PC needs to increment
        Not(in=jumpInst, out=incInst);

    //PC-16bit counter, similar to a regsiter but has two additional bits...when inc=1 then it increments, to reset = 1, loads whatever is in
        PC(in=A, load=jumpInst, inc=incInst, reset=reset, out=PC);
 }